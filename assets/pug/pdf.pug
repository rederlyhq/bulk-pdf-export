mixin HeicImg(url, id)
    img.fullpageImg(id=id alt=id class='heic' src=`${url}`)
    script.
        (async ()=>{
            var url = "#{url}";
            var name = "#{id}";
            console.log('HEIC: Checking', name);

            if (!name.toLowerCase().endsWith('.heic')) return;
            console.log('HEIC: Starting', url);
            
            var heic = document.getElementById("#{id}");

            try {
                const res = await fetch(url);
                
                // In Rederly architecture, HEIC files can be converted to JPEG files.
                if (res.headers.get('content-type') === 'image/jpeg') {
                    return heic.src = url;
                }

                const blob = await res.blob();
                const conversionResult = await window.sequentialHeic2any(blob)
                console.log('HEIC: Success!');
                const heicUrl = URL.createObjectURL(conversionResult);
                heic.onload = () => {
                    // TODO downgrade to log
                    console.log('HEIC: LOAD EVENT SUCCESS');
                    heic.dispatchEvent(new Event('heicDone'));
                }
                heic.onerror = (e) => {
                    console.error(`HEIC: Failed to load ${heic.src}`);
                    heic.dispatchEvent(new Event('heicDone'));
                }
                heic.src = heicUrl;
            } catch (e) {
                console.error('HEIC: Failed to fetch', e);
                heic.dispatchEvent(new Event('heicDone'));
            }
        })();

mixin PdfSetupMixin
    script(src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js")
    script.
        //- pdfjsLib.GlobalWorkerOptions.workerSrc = 'node_modules/pdfjs-dist/build/pdf.worker.min.js';
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
        function renderPage(pdf, pageNumber, canvas) {
            return pdf.getPage(pageNumber).then(
                function(page) {
                    console.log(page);
                    viewport = page.getViewport({scale: 1});
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    page.render({canvasContext: canvas.getContext('2d'), viewport: viewport});
                }
            );
        }
    style.
        .pdf-viewer {
            min-width: 100%;
            min-height: 100%;
            background: rgba(0, 0, 0, 0.1);
            overflow: auto;
        }
        .pdf-page-canvas {
            display: block;
            margin: 5px auto;
            border: 1px solid rgba(0, 0, 0, 0.2);
            max-height: 100% !important;
            max-width: 100% !important;
        }


mixin InlinePdfMixin(url, id)
    div.pdf-viewer(id=id)
    script.
        var thePdf = null;
        var scale = 1;
        console.warn('Getting ' + "#{url}");
        pdfjsLib.getDocument("#{url}").promise.then(
            function(pdf) {
                console.warn('Got pdf of ' + pdf.numPages + ' pages');

                viewer = document.getElementById("#{id}");
                for (page = 1; page <= pdf.numPages; page++) {
                    canvas = document.createElement("canvas");
                    canvas.className = 'pdf-page-canvas';
                    viewer.appendChild(canvas);
                    renderPage(pdf, page, canvas).then(console.log);
                }
            }
        );


doctype html
head
    script(src="/webwork2_files/js/vendor/iframe-resizer/js/iframeResizer.min.js")
    script(src="https://unpkg.com/heic2any@0.0.3/dist/heic2any.js")
    script.
        let currentHEICPromise = Promise.resolve();
        window.sequentialHeic2any = (blob) => {
            //- This is what we were originally doing, however we noticed that the browser waits for all to load before rendering anything
            //- With this fix they lazy load in; so if it times out before all resourses are done you get some
            //- return heic2any({ blob });
            const result = (async () => {
                try {
                    await currentHEICPromise;
                } catch (e) {
                    console.warn('currentHEICPromise failed', e);
                }
                return heic2any({ blob });
            })();
            currentHEICPromise = result;
            return result;
        };
    +PdfSetupMixin
    style(type="text/css"). 
        .attachmentTitle {
            break-before: page;
        }

        .fullpageImg {
            max-width: 90% !important;
            max-height: 90% !important;
            break-inside: avoid;
            object-fit: cover;
        }

        table {
            border-collapse: collapse;
            text-align: center;
        }

        td, th { 
            border-left: 2px solid black; 
            border-right: 2px solid black;
            padding: 6px;
        }

        thead {
            border-bottom: 2px solid black;
        }

        tr:last-child {
            border-top: 2px solid black;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
            color-adjust: exact;
            -webkit-print-color-adjust: exact;
        }
body(width="210mm" height="297mm")
    //- TODO: Add a Rederly header
    include templates/rederly-logo.pug
    h1(style={'text-align': 'center'}) #{topicTitle}
    h2(style={'text-align': 'center'}) #{firstName} #{lastName}
    if earliestStartTime && lastSubmissionTime
        h3(style={'text-align': 'center'}) #{earliestStartTime.toLocaleString('en-US', { timeZone: 'America/New_York'})} ET - #{lastSubmissionTime.toLocaleString('en-US', { timeZone: 'America/New_York'})} ET
        h3(style={'text-align': 'center'}) Duration: #{Math.floor((lastSubmissionTime - earliestStartTime) / 60000)} minutes
    table(style={'margin-left': 'auto', 'margin-right': 'auto', 'border': '1px solid black'})
        thead 
            tr 
                th Problem Number
                th Effective Score
                th System Score
                th Weight
                th Effective Weighted Score
        tbody 
            each problem, problemIndex in problems
                tr 
                    td 
                        a(href=`#probHeader${problem.number}`) #{problem.number}
                    td #{problem.effectiveScore}
                    td #{problem.legalScore}
                    td #{problem.weight}
                    td #{problem.effectiveWeightedScore.toFixed(2)}
            tr 
                td(colspan=3)
                th Total
                td #{totalWeightedScore.toFixed(2)} / #{totalWeight.toFixed(2)} (#{totalWeightedPercentage.toPercentString()})
    each problem, problemIndex in problems
        if problem.number
            h3(style={'break-before': 'page', 'break-after': 'avoid'} id=`probHeader${problem.number}`) Problem #{problem.number}

        if problem.effectiveScore
            div Effective Score: #{problem.effectiveScore}
        if problem.legalScore
            div Original System Score: #{problem.legalScore}
        if problem.weight 
            div Weight: #{problem.weight}

        if problem.submissionTime
            div Submission Time: #{problem.submissionTime.toLocaleString('en-US', { timeZone: 'America/New_York'})} ET 
                i(style={'font-size': '8px'}) (#{problem.submissionTime.toString()})

        if problem.srcdoc
            iframe(srcdoc=`${problem.srcdoc.trim()}` width='100%' id=`prob${problem.number}`)
            script.
                iFrameResize({ log: false, checkOrigin: false, autoResize: true, resizeFrom: 'child' }, "#prob#{problem.number}");
        else
            h3 Could not render Problem #{problem.number}

        each attachment, attachmentIndex in (problem.attachments || [])
            div.attachmentTitle #{attachment.name} (Uploaded at #{attachment.time})
            if attachment.name && attachment.name.toLowerCase().endsWith('.pdf')
                +InlinePdfMixin(attachment.url, `${problemIndex}_${attachmentIndex}_${attachment.name}`)
            else if attachment.name && attachment.name.toLowerCase().endsWith('.heic')
                +HeicImg(attachment.url, `${problemIndex}_${attachmentIndex}_${attachment.name}`)
            else
                img.fullpageImg(alt=attachment.name src=attachment.url)
